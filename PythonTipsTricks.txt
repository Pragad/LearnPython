0. Print
1. Why use main in Python
2. Multiline Comments
3. Exponentiation
4. Python String Formatting
5. Accessing Elelemt in a String Array
6. String Builtin Helper Functions
6b. Check if string has only alphabets
7. Printing String
8. Get input from Console
9. Single quotes vs. double quotes in Python
10. What is the difference between tuples and lists in Python?
11. Python Dictionary
11b. Ordered Dictionary
12. How will you convert a string to an int in python?
    How will you convert a string to a long in python?
    How will you convert a string to a float in python?
    How will you convert a object to a string in python?
    How will you convert a object to a regular expression in python?
    How will you convert a String to an object in python?
    How will you convert a string to a tuple in python?
    How will you convert a string to a list in python?
    How will you convert a string to a set in python?
    How will you create a dictionary using tuples in python?
13. Date Time
14. Boolean
15. Function
16. Import Module from Function
17. The __doc__ attribute
18. Variable number of args to a function
19. Lists
20. DICTIONARY:
21. PYTHON FOR STATEMENT
21b. Accessing the index in Python for loops
22. TYPE of Object:
23. CONTINUATION CHAR:
24. What is GIL Global Interpreter Lock?
25. Creating 2D Array in Python
26. Python Objects: Mutable vs. Immutable
27. How do I pass a variable by reference
-------------------------------------------------------------------------------------------------

0.
Print
    print "There are %d items in the suitcase." % (list_length)

1.
Why use main in Python
http://stackoverflow.com/questions/419163/what-does-if-name-main-do
http://stackoverflow.com/questions/4041238/why-use-def-main

    If the python interpreter is running that module (the source file) as the main program, it sets the special __name__ variable to have a value "__main__".
    If this file is being imported from another module, __name__ will be set to the module's name.

    IMP:
    Your code can also be imported and used in another module.
    By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.

    # file one.py
        def func():
            print("func() in one.py")

        print("top-level in one.py")

        if __name__ == "__main__":
            print("one.py is being run directly")
        else:
            print("one.py is being imported into another module")

    # file two.py
        import one

        print("top-level in two.py")
        one.func()

        if __name__ == "__main__":
            print("two.py is being run directly")
        else:
            print("two.py is being imported into another module")

    Now, if you invoke the interpreter as
        python one.py

    The output will be
        top-level in one.py
        one.py is being run directly

    If you run two.py instead:
        python two.py

    You get
        top-level in one.py
        one.py is being imported into another module
        top-level in two.py
        func() in one.py
        two.py is being run directly

    Thus, when module one gets loaded, its __name__ equals "one" instead of __main__

2. 
Multiline Comments
    """ hello
    world """

    Single Line comments
    #

3.
Exponentiation
    **
    pow(10, 2) = 10 ** 2

4. 
Python String Formatting
https://docs.python.org/2/library/stdtypes.html#string-formatting
    
    "%0.2f" % (num,)

    - Precision (optional), given as a '.' (dot) followed by the precision.
      If specified as '*' (an asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes after the precision.
    - Length modifier (optional).
    - Conversion type.

5. 
Accessing Elelemt in a String Array
    fifth_letter = "MONTY"[4]

6. 
String Builtin Helper Functions
    Methods that use dot notation only work with strings.

    On the other hand, len() and str() can work on other data types.

        len(str)
        str.upper()
        str.lower()
        str(numeric_value)

    How will you capitalizes first letter of string?
        capitalize()  - Capitalizes first letter of string.

6b.
Check if string has only alphabets
    str.isalpha()

7. 
Printing String
    string_1 = "Camelot"
    string_2 = "place"

    print "Let's not go to %s. 'Tis a silly %s." % (string_1, string_2)
    - You need the same number of %s terms in a string as the number of variables in parentheses

8.
Get input from Console
    raw_input()

    name = raw_input("What is your name?")
    quest = raw_input("What is your quest?")
    color = raw_input("What is your favorite color?")

9.
Single quotes vs. double quotes in Python
http://stackoverflow.com/questions/56011/single-quotes-vs-double-quotes-in-python
http://henry.precheur.org/python/python_quote.html
    
    Quoting the official docs at https://docs.python.org/2.0/ref/strings.html:
        In plain English: String literals can be enclosed in matching single quotes (') or double quotes (").
    So there is no difference

    I like to use double quotes around strings that are used for interpolation or that are natural language messages, and
    single quotes for small symbol-like strings, but will break the rules if the strings contain quotes

    Python interpreter is doing when printing string representation:
        If the string doesn’t contain quotes, it will enclose this string with single quotes.
        If the string contains single quotes but no double quotes, it will enclose the string with double quotes.
        And if the string contains both single and double quotes, it will use single quotes

10.
What is the difference between tuples and lists in Python?
http://www.tutorialspoint.com/python/python_interview_questions.htm

    The main differences between lists and tuples are -
        Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while
        tuples are enclosed in parentheses ( ( ) ) and cannot be updated.
    Tuples can be thought of as read-only lists.

11.
Python Dictionary
http://www.tutorialspoint.com/python/python_interview_questions.htm

    Python's dictionaries are kind of hash table type.
    They work like associative arrays or hashes found in Perl and consist of key-value pairs.
    A dictionary key can be almost any Python type, but are usually numbers or strings.
    Values, on the other hand, can be any arbitrary Python object.

        dict = {}
        dict['one'] = "This is one"
        dict[2]     = "This is two"
        tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

        dict.keys()
        dict.values()

11b.
Ordered Dictionary
http://stackoverflow.com/questions/1867861/python-dictionary-keep-keys-values-in-same-order-as-declared

    >>> from collections import OrderedDict
    >>> my_dictionary=OrderedDict()
    >>> my_dictionary['foo']=3
    >>> my_dictionary['aol']=1
    >>> my_dictionary
    OrderedDict([('foo', 3), ('aol', 1)])

12.
How will you convert a string to an int in python?
    int(x [,base]) - Converts x to an integer. base specifies the base if x is a string.

How will you convert a string to a long in python?
    long(x [,base] ) - Converts x to a long integer. base specifies the base if x is a string.

How will you convert a string to a float in python?
    float(x) - Converts x to a floating-point number.

How will you convert a object to a string in python?
    str(x) - Converts object x to a string representation.

How will you convert a object to a regular expression in python?
    repr(x) - Converts object x to an expression string.

How will you convert a String to an object in python?
    eval(str) - Evaluates a string and returns an object.

How will you convert a string to a tuple in python?
    tuple(s) - Converts s to a tuple.

How will you convert a string to a list in python?
    list(s) - Converts s to a list.

How will you convert a string to a set in python?
    set(s) - Converts s to a set.

How will you create a dictionary using tuples in python?
    dict(d) - Creates a dictionary. d must be a sequence of (key,value) tuples.

13.
Date Time
    from datetime import datetime
    now = datetime.now()

    current_year = now.year
    current_month = now.month
    current_day = now.day

14.
Boolean
    True, False have CAP 'T' and CAP 'F'

15.
Function
    Python function gets executed only when called

16.
Import Module from Function
    Can import just a module from a function

        import math
        math.sqrt(25)

        from math import *
        sqrt(25)

17.
The __doc__ attribute
https://www.iram.fr/IRAMFR/GILDAS/doc/html/gildas-python-html/node9.html

    Each Python object (functions, classes, variables,...) provides (if programmer has filled it) a short documentation which describes its features.
    You can access it with commands like print myobject.__doc__

18.
Variable number of args to a function
http://stackoverflow.com/questions/919680/can-a-variable-number-of-arguments-be-passed-to-a-function

    def manyArgs(*arg):
      print "I was called with", len(arg), "arguments:", arg

    >>> manyArgs(1)
    I was called with 1 arguments: (1,)
    >>> manyArgs(1, 2,3)
    I was called with 3 arguments: (1, 2, 3)

        def biggest_number(*args):
        print max(args)
        return max(args)

        biggest_number(-10, -5, 5, 10)

19.
Lists
    Add Elements
        - use append()
    SLICING:
        LAST INDEX DOES NOT GET INCLUDED
        Then, we take a subsection and store it in the slice list.
        We start at the index before the colon and continue up to BUT NOT INCLUDING THE INDEX AFTER THE COLON.

    SEARCH:
        .index()

    INSERT:
        .insert()

    SORT:
        .sort()
        inventory['backpack'].sort()

    REMOVE
        backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']
        backpack.remove('dagger')

        inventory['backpack'].remove('dagger')

20.
DICTIONARY:

    - Dictornaries are MUTABLE
    A dictionary is similar to a list, but you access values by looking up a key instead of an index.
    A key can be any string or number.
    Dictionaries are enclosed in curly braces

        menu = {} # Empty dictionary
        menu['Chicken Alfredo'] = 14.50 # Adding new key-value pair

        str(len(menu))

        del menu[key_name]
        
    IT CAN STORE DIFFERENT DATA TYPES
        my_dict = {
            "fish": ["c", "a", "r", "p"],
            "cash": -4483,
            "luck": "good"
        }
        print my_dict["fish"][0]

    PRINT
        d = {"foo" : "bar"}

        for key in d: 
            print d[key]    # IMP  

        prices = {"banana" : 4, "apple" : 2, "orange" : 1.5, "pear" : 3}
        stock = {"banana" : 6, "apple" : 0, "orange" : 32, "pear" : 15}

        for item in prices:
            print item
            print "price: %s" % prices[item]
            print "stock: %s" % stock[item]

21. 
PYTHON FOR STATEMENT
    for iterating_var in sequence:

    fruits = ['banana', 'apple',  'mango']
    for index in range(len(fruits)):
       print 'Current fruit :', fruits[index]
        
21b.
Accessing the index in Python for loops
http://stackoverflow.com/questions/522563/accessing-the-index-in-python-for-loops

    for idx, val in enumerate(ints):
        print(idx, val)

22.
TYPE of Object:
    type()

23.
CONTINUATION CHAR:
    The \ character is a continuation character. The following line is considered a continuation of the current line.

24.
What is GIL Global Interpreter Lock?
http://stackoverflow.com/questions/265687/why-the-global-interpreter-lock
http://stackoverflow.com/questions/1294382/what-is-a-global-interpreter-lock-gil

    Python's GIL is intended to serialize access to interpreter internals from different threads.
    On multi-core systems, it means that multiple threads can't effectively make use of multiple cores.

    In general, for any thread safety problem you will need to protect your internal data structures with locks. This can be done with various levels of granularity.

        You can use fine-grained locking, where every separate structure has its own lock.
        You can use coarse-grained locking where one lock protects everything (the GIL approach).

    There are various pros and cons of each method.
    Fine-grained locking allows greater parallelism - two threads can execute in parallel when they don't share any resources.
    However there is a much larger administrative overhead. For every line of code, you may need to acquire and release several locks.

    The coarse grained approach is the opposite.
    Two threads can't run at the same time, but an individual thread will run faster because its not doing so much bookkeeping.
    Ultimately it comes down to a tradeoff between single-threaded speed and parallelism.

25.
Creating 2D Array in Python

    board[0] = ["O"] * 5
    board[1] = ["O"] * 5
    board[2] = ["O"] * 5
    board[3] = ["O"] * 5
    board[4] = ["O"] * 5
    print board

    board = []
    for x in range(5):
        tmpList = ["O"] * 5
        board.append(tmpList)

    print board

26.
Python Objects: Mutable vs. Immutable
https://codehabitude.com/2013/12/24/python-objects-mutable-vs-immutable/

27.
How do I pass a variable by reference
http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference

